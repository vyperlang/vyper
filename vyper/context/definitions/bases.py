from collections import (
    OrderedDict,
)
from typing import (
    Tuple,
    Union,
)

from vyper import (
    ast as vy_ast,
)
from vyper.context.types import (
    compare_types,
    get_type_from_node,
)
from vyper.context.utils import (
    check_call_args,
)


class BaseDefinition:

    """
    Inherited class common to all classes representing definitions.
    """

    __slots__ = ("name",)

    def __init__(self, name):
        self.name = name


class FunctionDefinition(BaseDefinition):

    """
    Base class for all function definitions.

    Object attributes
    -----------------
    arguments : OrderedDict
        A dictionary of values representing arguments when calling the function.
        The values may be either type objects or Variables.
    arg_count : int | tuple
        The number of required positional arguments when calling the function.
        If given as a tuple, the values correspond to the minimum and maximum
        number of required arguments.
    kwarg_keys : list
        A list of optional keyword arguments when calling the function. Automatically
        generated by comparing the number of values in arguments with the minimum
        value from arg_count.
    return_var : Variable, optional
        The value to be returned upon successfully calling this function.
    """

    __slots__ = ("return_var", "arguments", "arg_count", "kwarg_keys")

    def __init__(
        self,
        name: str,
        arguments: OrderedDict,
        arg_count: Union[Tuple[int, int], int],
        return_var,
    ):
        BaseDefinition.__init__(self, name)
        self.arguments = arguments
        self.arg_count = arg_count
        self.return_var = return_var
        self.kwarg_keys = []
        if isinstance(arg_count, tuple):
            self.kwarg_keys = list(self.arguments)[self.arg_count[0]:]

    def validate_call(self, node: vy_ast.Call):
        """
        Validates a call to this function and returns the result.

        If the given arguments are invalid, this method should always raise.

        Arguments
        ---------
        node : Call
            Vyper ast node of call action to validate.

        Returns
        -------
        Variable, optional
            A definition object generated as a result of the call.
        """
        check_call_args(node, self.arg_count, self.kwarg_keys)
        for arg, key in zip(node.args, self.arguments):
            self._compare_argument(key, arg)
        for kwarg in node.keywords:
            self._compare_argument(kwarg.arg, kwarg.value)
        return self.return_var

    def _compare_argument(self, key, arg_node):
        given_type = get_type_from_node(arg_node)
        if hasattr(self.arguments[key], 'type'):
            expected_type = self.arguments[key].type
        else:
            expected_type = self.arguments[key]
        # TODO better exception, give the name of the argument
        compare_types(given_type, expected_type, arg_node)
