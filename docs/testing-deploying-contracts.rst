.. index:: testing;deploying, testing

##################
Testing a Contract
##################

The following example demonstrates how to compile and deploy your vyper contract.
It requires ``pyethereum>=2.0.0`` for the ``tester`` module

.. code-block:: python
  from vyper import compiler
  from ethereum.tools import tester

  # Get a new chain
  chain = tester.Chain()
  # Set the vyper compiler to run when the vyper language is requested
  tester.languages['vyper'] = compiler.Compiler()

  with open('my_contract.vy' 'r') as f:
      source_code = f.read()
  # Compile and Deploy contract to provisioned testchain
  # (e.g. run __init__ method) with given args (e.g. init_args)
  # from msg.sender = t.k1 (private key of address 1 in test acconuts)
  # and supply 1000 wei to the contract
  init_args = ['arg1', 'arg2', 3]
  contract = chain.contract(source_code, language="vyper",
          init_args, sender=t.k1, value=1000)

  contract.myMethod() # Executes myMethod on the tester "chain"
  chain.mine() # Mines the above transaction (and any before it) into a block

Note: We are working on integration with `ethereum-tester <https://github.com/ethereum/ethereum-tester>`_,
so this example will change.

####################
Deploying a Contract
####################

You have several options to deploy a Vyper contract to the public testnets.

One option is to take the bytecode generated by the vyper compiler and manually deploy it through mist or geth:

.. code-block:: bash
  vyper yourFileName.vy
  # returns bytecode

Or deploy it with current browser on `myetherwallet <https://www.myetherwallet.com/#contracts>`_ contract menu.

We are working on integration with `populus <https://github.com/ethereum/populus/issues/372>`_,
this will be the preferred way of deploying vyper contracts in the future.
